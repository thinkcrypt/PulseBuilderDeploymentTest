import { BASE_LIMIT } from '../../';
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the type for the table properties
type Content = { basic: {}; content: {} };

// Define the type for the table properties
type InitialStateProps = {
	history: Content[];
	next: Content[];
	current: Content | null;
};

// Define the initial state of the table
const initialState: InitialStateProps = {
	history: [],
	next: [],
	current: null,
};

export const builderSlice = createSlice({
	name: 'builder',
	initialState,
	reducers: {
		push: (state, action: PayloadAction<Content>) => {
			const latest: any = state.current;
			state.current = action.payload;

			if (latest !== null) {
				state.history.push(latest);
				state.next = []; // Clear the next stack when a new action is pushed
			}
		},
		undo: state => {
			if (state.history.length === 0) return;
			const latest: any = state.history.pop();
			state.next.push(latest);
			state.current = null;
		},
		redo: state => {
			if (state.next.length === 0) return;
			const latest: any = state.next.pop();
			state.history.push(latest);
			state.current = null;
		},
		resetBuilder: state => {
			state.history = [];
			state.next = [];
			state.current = null;
		},
	},
});

// Export the actions generated by createSlice
export const { undo, redo, push, resetBuilder } = builderSlice.actions;

// Export the reducer
export default builderSlice.reducer;
